{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n%matplotlib inline\nimport seaborn as sns\nimport sklearn","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:25:46.341951Z","iopub.execute_input":"2022-09-24T06:25:46.342496Z","iopub.status.idle":"2022-09-24T06:25:46.927018Z","shell.execute_reply.started":"2022-09-24T06:25:46.342392Z","shell.execute_reply":"2022-09-24T06:25:46.925547Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('../input/financial-fraud-transaction-detection/Fraud.csv')\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:25:46.929618Z","iopub.execute_input":"2022-09-24T06:25:46.929977Z","iopub.status.idle":"2022-09-24T06:26:00.403362Z","shell.execute_reply.started":"2022-09-24T06:25:46.929943Z","shell.execute_reply":"2022-09-24T06:26:00.402056Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n\n      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n0  M1979787155             0.0             0.0        0               0  \n1  M2044282225             0.0             0.0        0               0  \n2   C553264065             0.0             0.0        1               0  \n3    C38997010         21182.0             0.0        1               0  \n4  M1230701703             0.0             0.0        0               0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>type</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>9839.64</td>\n      <td>C1231006815</td>\n      <td>170136.0</td>\n      <td>160296.36</td>\n      <td>M1979787155</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>1864.28</td>\n      <td>C1666544295</td>\n      <td>21249.0</td>\n      <td>19384.72</td>\n      <td>M2044282225</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>TRANSFER</td>\n      <td>181.00</td>\n      <td>C1305486145</td>\n      <td>181.0</td>\n      <td>0.00</td>\n      <td>C553264065</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>CASH_OUT</td>\n      <td>181.00</td>\n      <td>C840083671</td>\n      <td>181.0</td>\n      <td>0.00</td>\n      <td>C38997010</td>\n      <td>21182.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>11668.14</td>\n      <td>C2048537720</td>\n      <td>41554.0</td>\n      <td>29885.86</td>\n      <td>M1230701703</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:00.405406Z","iopub.execute_input":"2022-09-24T06:26:00.405982Z","iopub.status.idle":"2022-09-24T06:26:00.421501Z","shell.execute_reply.started":"2022-09-24T06:26:00.405931Z","shell.execute_reply":"2022-09-24T06:26:00.420366Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6362620 entries, 0 to 6362619\nData columns (total 11 columns):\n #   Column          Dtype  \n---  ------          -----  \n 0   step            int64  \n 1   type            object \n 2   amount          float64\n 3   nameOrig        object \n 4   oldbalanceOrg   float64\n 5   newbalanceOrig  float64\n 6   nameDest        object \n 7   oldbalanceDest  float64\n 8   newbalanceDest  float64\n 9   isFraud         int64  \n 10  isFlaggedFraud  int64  \ndtypes: float64(5), int64(3), object(3)\nmemory usage: 534.0+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:00.424773Z","iopub.execute_input":"2022-09-24T06:26:00.426316Z","iopub.status.idle":"2022-09-24T06:26:01.405751Z","shell.execute_reply.started":"2022-09-24T06:26:00.426277Z","shell.execute_reply":"2022-09-24T06:26:01.404554Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"step              0\ntype              0\namount            0\nnameOrig          0\noldbalanceOrg     0\nnewbalanceOrig    0\nnameDest          0\noldbalanceDest    0\nnewbalanceDest    0\nisFraud           0\nisFlaggedFraud    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['isFraud'].value_counts()","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-09-24T06:26:01.407275Z","iopub.execute_input":"2022-09-24T06:26:01.407591Z","iopub.status.idle":"2022-09-24T06:26:01.474968Z","shell.execute_reply.started":"2022-09-24T06:26:01.407553Z","shell.execute_reply":"2022-09-24T06:26:01.473734Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"0    6354407\n1       8213\nName: isFraud, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['isFlaggedFraud'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:01.476188Z","iopub.execute_input":"2022-09-24T06:26:01.476524Z","iopub.status.idle":"2022-09-24T06:26:01.539058Z","shell.execute_reply.started":"2022-09-24T06:26:01.476494Z","shell.execute_reply":"2022-09-24T06:26:01.537546Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"0    6362604\n1         16\nName: isFlaggedFraud, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## ****It is clear from above information that this dataset is an imbalanced dataset***","metadata":{}},{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"markdown","source":"## ****Identyfying which type of trasanction is most or least***","metadata":{}},{"cell_type":"code","source":"type_value_counts = df['type'].value_counts()\ntype_value_counts","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:01.541286Z","iopub.execute_input":"2022-09-24T06:26:01.541835Z","iopub.status.idle":"2022-09-24T06:26:01.972614Z","shell.execute_reply.started":"2022-09-24T06:26:01.541771Z","shell.execute_reply":"2022-09-24T06:26:01.971303Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"CASH_OUT    2237500\nPAYMENT     2151495\nCASH_IN     1399284\nTRANSFER     532909\nDEBIT         41432\nName: type, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"type_value_counts.index","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:01.974026Z","iopub.execute_input":"2022-09-24T06:26:01.974378Z","iopub.status.idle":"2022-09-24T06:26:01.986755Z","shell.execute_reply.started":"2022-09-24T06:26:01.974345Z","shell.execute_reply":"2022-09-24T06:26:01.985420Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Index(['CASH_OUT', 'PAYMENT', 'CASH_IN', 'TRANSFER', 'DEBIT'], dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"figure(figsize = (7,7))\ntextprops = {\"fontsize\":13}\nplt.pie(type_value_counts, labels = ['CASH_OUT','PAYMENT','CASH_IN', 'TRANSFER', 'DEBIT'], autopct = '%1.2f%%', \n        textprops = textprops)\nplt.show","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:01.988424Z","iopub.execute_input":"2022-09-24T06:26:01.988927Z","iopub.status.idle":"2022-09-24T06:26:02.132102Z","shell.execute_reply.started":"2022-09-24T06:26:01.988880Z","shell.execute_reply":"2022-09-24T06:26:02.130712Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 504x504 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"## ****Conclusion*** :- \n#### ***It is evident from the above pieplot that CASH_OUT transaction is most & DEBIT transaction is least***","metadata":{}},{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"markdown","source":"## ****Identyfying which type of trasanction involves maximum or minimum amount transfer***","metadata":{}},{"cell_type":"code","source":"type_Vs_amount = df.groupby('type')['amount'].sum()\ntype_Vs_amount","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:02.139705Z","iopub.execute_input":"2022-09-24T06:26:02.141435Z","iopub.status.idle":"2022-09-24T06:26:02.848872Z","shell.execute_reply.started":"2022-09-24T06:26:02.141363Z","shell.execute_reply":"2022-09-24T06:26:02.848050Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"type\nCASH_IN     2.363674e+11\nCASH_OUT    3.944130e+11\nDEBIT       2.271992e+08\nPAYMENT     2.809337e+10\nTRANSFER    4.852920e+11\nName: amount, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"figure(figsize = (7,7))\ntextprops = {\"fontsize\":13}\nexplode = (0.0, 0.1, 0.0, 0.5, 0.1)\nplt.pie(type_Vs_amount, labels = ['CASH_IN','CASH_OUT','DEBIT', 'PAYMENT', 'TRANSFER'], \n        autopct = '%1.2f%%', pctdistance = 0.9, textprops = textprops, explode = explode)\nplt.show","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:02.850222Z","iopub.execute_input":"2022-09-24T06:26:02.850563Z","iopub.status.idle":"2022-09-24T06:26:03.009662Z","shell.execute_reply.started":"2022-09-24T06:26:02.850533Z","shell.execute_reply":"2022-09-24T06:26:03.007919Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 504x504 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"## ****Conclusion*** :- \n#### ***It is evident from the above pieplot that amount of TRANSFER transaction is most & DEBIT transaction is least***","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## ****Finding out type of transaction Vs amount transacted***","metadata":{}},{"cell_type":"code","source":"type_value_counts = df['type'].value_counts()\ntype_value_counts_new =type_value_counts.reset_index().rename(columns\n                                                             = {'index':\"type\", \"type\":\"ValueCounts\"})\ntype_value_counts_new","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:03.012270Z","iopub.execute_input":"2022-09-24T06:26:03.013313Z","iopub.status.idle":"2022-09-24T06:26:03.465776Z","shell.execute_reply.started":"2022-09-24T06:26:03.013244Z","shell.execute_reply":"2022-09-24T06:26:03.464479Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"       type  ValueCounts\n0  CASH_OUT      2237500\n1   PAYMENT      2151495\n2   CASH_IN      1399284\n3  TRANSFER       532909\n4     DEBIT        41432","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>ValueCounts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CASH_OUT</td>\n      <td>2237500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PAYMENT</td>\n      <td>2151495</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CASH_IN</td>\n      <td>1399284</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TRANSFER</td>\n      <td>532909</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>DEBIT</td>\n      <td>41432</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"type_value_counts_new = type_value_counts_new.assign(type_ValueCounts_percentage = \n                                                   lambda x: x['ValueCounts']*100/x['ValueCounts'].sum())\ntype_value_counts_new\n","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:03.467742Z","iopub.execute_input":"2022-09-24T06:26:03.468189Z","iopub.status.idle":"2022-09-24T06:26:03.490443Z","shell.execute_reply.started":"2022-09-24T06:26:03.468147Z","shell.execute_reply":"2022-09-24T06:26:03.489091Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"       type  ValueCounts  type_ValueCounts_percentage\n0  CASH_OUT      2237500                    35.166331\n1   PAYMENT      2151495                    33.814608\n2   CASH_IN      1399284                    21.992261\n3  TRANSFER       532909                     8.375622\n4     DEBIT        41432                     0.651178","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>ValueCounts</th>\n      <th>type_ValueCounts_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CASH_OUT</td>\n      <td>2237500</td>\n      <td>35.166331</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PAYMENT</td>\n      <td>2151495</td>\n      <td>33.814608</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CASH_IN</td>\n      <td>1399284</td>\n      <td>21.992261</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TRANSFER</td>\n      <td>532909</td>\n      <td>8.375622</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>DEBIT</td>\n      <td>41432</td>\n      <td>0.651178</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"type_Vs_amount = df.groupby('type')['amount'].sum().reset_index()\ntype_Vs_amount","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:03.492122Z","iopub.execute_input":"2022-09-24T06:26:03.492527Z","iopub.status.idle":"2022-09-24T06:26:04.169594Z","shell.execute_reply.started":"2022-09-24T06:26:03.492492Z","shell.execute_reply":"2022-09-24T06:26:04.168252Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"       type        amount\n0   CASH_IN  2.363674e+11\n1  CASH_OUT  3.944130e+11\n2     DEBIT  2.271992e+08\n3   PAYMENT  2.809337e+10\n4  TRANSFER  4.852920e+11","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CASH_IN</td>\n      <td>2.363674e+11</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CASH_OUT</td>\n      <td>3.944130e+11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>DEBIT</td>\n      <td>2.271992e+08</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PAYMENT</td>\n      <td>2.809337e+10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TRANSFER</td>\n      <td>4.852920e+11</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"type_Vs_amount = type_Vs_amount.assign(type_Vs_amount_percentage = \n                                                   lambda x: x['amount']*100/x['amount'].sum())\ntype_Vs_amount","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:04.171757Z","iopub.execute_input":"2022-09-24T06:26:04.172268Z","iopub.status.idle":"2022-09-24T06:26:04.187407Z","shell.execute_reply.started":"2022-09-24T06:26:04.172220Z","shell.execute_reply":"2022-09-24T06:26:04.185989Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"       type        amount  type_Vs_amount_percentage\n0   CASH_IN  2.363674e+11                  20.654391\n1  CASH_OUT  3.944130e+11                  34.464822\n2     DEBIT  2.271992e+08                   0.019853\n3   PAYMENT  2.809337e+10                   2.454871\n4  TRANSFER  4.852920e+11                  42.406062","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>amount</th>\n      <th>type_Vs_amount_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CASH_IN</td>\n      <td>2.363674e+11</td>\n      <td>20.654391</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CASH_OUT</td>\n      <td>3.944130e+11</td>\n      <td>34.464822</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>DEBIT</td>\n      <td>2.271992e+08</td>\n      <td>0.019853</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PAYMENT</td>\n      <td>2.809337e+10</td>\n      <td>2.454871</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TRANSFER</td>\n      <td>4.852920e+11</td>\n      <td>42.406062</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new = pd.merge(type_value_counts_new, type_Vs_amount, on = 'type')\ndf_new","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:04.189332Z","iopub.execute_input":"2022-09-24T06:26:04.189740Z","iopub.status.idle":"2022-09-24T06:26:04.207725Z","shell.execute_reply.started":"2022-09-24T06:26:04.189689Z","shell.execute_reply":"2022-09-24T06:26:04.206425Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"       type  ValueCounts  type_ValueCounts_percentage        amount  \\\n0  CASH_OUT      2237500                    35.166331  3.944130e+11   \n1   PAYMENT      2151495                    33.814608  2.809337e+10   \n2   CASH_IN      1399284                    21.992261  2.363674e+11   \n3  TRANSFER       532909                     8.375622  4.852920e+11   \n4     DEBIT        41432                     0.651178  2.271992e+08   \n\n   type_Vs_amount_percentage  \n0                  34.464822  \n1                   2.454871  \n2                  20.654391  \n3                  42.406062  \n4                   0.019853  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>ValueCounts</th>\n      <th>type_ValueCounts_percentage</th>\n      <th>amount</th>\n      <th>type_Vs_amount_percentage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CASH_OUT</td>\n      <td>2237500</td>\n      <td>35.166331</td>\n      <td>3.944130e+11</td>\n      <td>34.464822</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PAYMENT</td>\n      <td>2151495</td>\n      <td>33.814608</td>\n      <td>2.809337e+10</td>\n      <td>2.454871</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CASH_IN</td>\n      <td>1399284</td>\n      <td>21.992261</td>\n      <td>2.363674e+11</td>\n      <td>20.654391</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TRANSFER</td>\n      <td>532909</td>\n      <td>8.375622</td>\n      <td>4.852920e+11</td>\n      <td>42.406062</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>DEBIT</td>\n      <td>41432</td>\n      <td>0.651178</td>\n      <td>2.271992e+08</td>\n      <td>0.019853</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new.plot(x= 'type', y = ['type_ValueCounts_percentage','type_Vs_amount_percentage'], kind = 'bar', figsize = (15,7))","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:04.209359Z","iopub.execute_input":"2022-09-24T06:26:04.210544Z","iopub.status.idle":"2022-09-24T06:26:04.477868Z","shell.execute_reply.started":"2022-09-24T06:26:04.210495Z","shell.execute_reply":"2022-09-24T06:26:04.476363Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='type'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1080x504 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"## ****Conclusion*** :-\n#### ***It is evident from above bar chart that :-***\n#### ***PAYMENT mode is used around 34 % of time while AMOUNT transacted through this mode is around 2.5 %***\n#### ***TRASFER mode is used around 8 % of time while AMOUNT transacted through this mode is around 42 %***","metadata":{}},{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"markdown","source":"## ****Converting imbalanced dataset to balanced dataset***","metadata":{}},{"cell_type":"code","source":"from sklearn.utils import resample\n#create two different dataframe of majority and minority class \ndf_majority = df[(df['isFraud']==0)] \ndf_minority = df[(df['isFraud']==1)] \n# upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,    # sample with replacement\n                                 n_samples= 6354407, # to match majority class\n                                 random_state=42)  # reproducible results\n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_minority_upsampled, df_majority])","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:04.479815Z","iopub.execute_input":"2022-09-24T06:26:04.480294Z","iopub.status.idle":"2022-09-24T06:26:10.177128Z","shell.execute_reply.started":"2022-09-24T06:26:04.480248Z","shell.execute_reply":"2022-09-24T06:26:10.175702Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# Display new class count\ndf_upsampled['isFraud'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:10.178464Z","iopub.execute_input":"2022-09-24T06:26:10.178992Z","iopub.status.idle":"2022-09-24T06:26:10.294927Z","shell.execute_reply.started":"2022-09-24T06:26:10.178944Z","shell.execute_reply":"2022-09-24T06:26:10.293705Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"1    6354407\n0    6354407\nName: isFraud, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_upsampled.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:10.296042Z","iopub.execute_input":"2022-09-24T06:26:10.297609Z","iopub.status.idle":"2022-09-24T06:26:10.321959Z","shell.execute_reply.started":"2022-09-24T06:26:10.297567Z","shell.execute_reply":"2022-09-24T06:26:10.320427Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"         step      type      amount     nameOrig  oldbalanceOrg  \\\n6283817   658  CASH_OUT   619824.64   C989559547      619824.64   \n1030533    71  TRANSFER  1871553.73   C677678546     1871553.73   \n6039793   484  CASH_OUT   156220.74   C389614238      156220.74   \n6020336   463  TRANSFER  1968008.53  C1548769886     1968008.53   \n6074070   516  CASH_OUT   346293.24   C829436029      346293.24   \n\n         newbalanceOrig     nameDest  oldbalanceDest  newbalanceDest  isFraud  \\\n6283817             0.0   C537664657      1420676.78      2040501.42        1   \n1030533             0.0   C646623849            0.00            0.00        1   \n6039793             0.0   C643171110            0.00       156220.74        1   \n6020336             0.0  C1779956771            0.00            0.00        1   \n6074070             0.0  C1738520779       750235.55      1096528.80        1   \n\n         isFlaggedFraud  \n6283817               0  \n1030533               0  \n6039793               0  \n6020336               0  \n6074070               0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>type</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6283817</th>\n      <td>658</td>\n      <td>CASH_OUT</td>\n      <td>619824.64</td>\n      <td>C989559547</td>\n      <td>619824.64</td>\n      <td>0.0</td>\n      <td>C537664657</td>\n      <td>1420676.78</td>\n      <td>2040501.42</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1030533</th>\n      <td>71</td>\n      <td>TRANSFER</td>\n      <td>1871553.73</td>\n      <td>C677678546</td>\n      <td>1871553.73</td>\n      <td>0.0</td>\n      <td>C646623849</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6039793</th>\n      <td>484</td>\n      <td>CASH_OUT</td>\n      <td>156220.74</td>\n      <td>C389614238</td>\n      <td>156220.74</td>\n      <td>0.0</td>\n      <td>C643171110</td>\n      <td>0.00</td>\n      <td>156220.74</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6020336</th>\n      <td>463</td>\n      <td>TRANSFER</td>\n      <td>1968008.53</td>\n      <td>C1548769886</td>\n      <td>1968008.53</td>\n      <td>0.0</td>\n      <td>C1779956771</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6074070</th>\n      <td>516</td>\n      <td>CASH_OUT</td>\n      <td>346293.24</td>\n      <td>C829436029</td>\n      <td>346293.24</td>\n      <td>0.0</td>\n      <td>C1738520779</td>\n      <td>750235.55</td>\n      <td>1096528.80</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## ****Handling categorical features***","metadata":{}},{"cell_type":"code","source":"df_type = pd.get_dummies(df_upsampled.type, drop_first=True)\ndf_type.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:10.323612Z","iopub.execute_input":"2022-09-24T06:26:10.325259Z","iopub.status.idle":"2022-09-24T06:26:11.975561Z","shell.execute_reply.started":"2022-09-24T06:26:10.325207Z","shell.execute_reply":"2022-09-24T06:26:11.974219Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"         CASH_OUT  DEBIT  PAYMENT  TRANSFER\n6283817         1      0        0         0\n1030533         0      0        0         1\n6039793         1      0        0         0\n6020336         0      0        0         1\n6074070         1      0        0         0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CASH_OUT</th>\n      <th>DEBIT</th>\n      <th>PAYMENT</th>\n      <th>TRANSFER</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6283817</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1030533</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6039793</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6020336</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6074070</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_upsampled.drop(columns = 'type', axis = 1 , inplace = True)\ndf_upsampled.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:11.977350Z","iopub.execute_input":"2022-09-24T06:26:11.978062Z","iopub.status.idle":"2022-09-24T06:26:19.072927Z","shell.execute_reply.started":"2022-09-24T06:26:11.977996Z","shell.execute_reply":"2022-09-24T06:26:19.071601Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"         step      amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n6283817   658   619824.64   C989559547      619824.64             0.0   \n1030533    71  1871553.73   C677678546     1871553.73             0.0   \n6039793   484   156220.74   C389614238      156220.74             0.0   \n6020336   463  1968008.53  C1548769886     1968008.53             0.0   \n6074070   516   346293.24   C829436029      346293.24             0.0   \n\n            nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n6283817   C537664657      1420676.78      2040501.42        1               0  \n1030533   C646623849            0.00            0.00        1               0  \n6039793   C643171110            0.00       156220.74        1               0  \n6020336  C1779956771            0.00            0.00        1               0  \n6074070  C1738520779       750235.55      1096528.80        1               0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6283817</th>\n      <td>658</td>\n      <td>619824.64</td>\n      <td>C989559547</td>\n      <td>619824.64</td>\n      <td>0.0</td>\n      <td>C537664657</td>\n      <td>1420676.78</td>\n      <td>2040501.42</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1030533</th>\n      <td>71</td>\n      <td>1871553.73</td>\n      <td>C677678546</td>\n      <td>1871553.73</td>\n      <td>0.0</td>\n      <td>C646623849</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6039793</th>\n      <td>484</td>\n      <td>156220.74</td>\n      <td>C389614238</td>\n      <td>156220.74</td>\n      <td>0.0</td>\n      <td>C643171110</td>\n      <td>0.00</td>\n      <td>156220.74</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6020336</th>\n      <td>463</td>\n      <td>1968008.53</td>\n      <td>C1548769886</td>\n      <td>1968008.53</td>\n      <td>0.0</td>\n      <td>C1779956771</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6074070</th>\n      <td>516</td>\n      <td>346293.24</td>\n      <td>C829436029</td>\n      <td>346293.24</td>\n      <td>0.0</td>\n      <td>C1738520779</td>\n      <td>750235.55</td>\n      <td>1096528.80</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new1 = pd.concat([df_upsampled, df_type], axis = 1,)\ndf_new1.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:19.074276Z","iopub.execute_input":"2022-09-24T06:26:19.074612Z","iopub.status.idle":"2022-09-24T06:26:19.882650Z","shell.execute_reply.started":"2022-09-24T06:26:19.074582Z","shell.execute_reply":"2022-09-24T06:26:19.881358Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"         step      amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n6283817   658   619824.64   C989559547      619824.64             0.0   \n1030533    71  1871553.73   C677678546     1871553.73             0.0   \n6039793   484   156220.74   C389614238      156220.74             0.0   \n6020336   463  1968008.53  C1548769886     1968008.53             0.0   \n6074070   516   346293.24   C829436029      346293.24             0.0   \n\n            nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \\\n6283817   C537664657      1420676.78      2040501.42        1               0   \n1030533   C646623849            0.00            0.00        1               0   \n6039793   C643171110            0.00       156220.74        1               0   \n6020336  C1779956771            0.00            0.00        1               0   \n6074070  C1738520779       750235.55      1096528.80        1               0   \n\n         CASH_OUT  DEBIT  PAYMENT  TRANSFER  \n6283817         1      0        0         0  \n1030533         0      0        0         1  \n6039793         1      0        0         0  \n6020336         0      0        0         1  \n6074070         1      0        0         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n      <th>CASH_OUT</th>\n      <th>DEBIT</th>\n      <th>PAYMENT</th>\n      <th>TRANSFER</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6283817</th>\n      <td>658</td>\n      <td>619824.64</td>\n      <td>C989559547</td>\n      <td>619824.64</td>\n      <td>0.0</td>\n      <td>C537664657</td>\n      <td>1420676.78</td>\n      <td>2040501.42</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1030533</th>\n      <td>71</td>\n      <td>1871553.73</td>\n      <td>C677678546</td>\n      <td>1871553.73</td>\n      <td>0.0</td>\n      <td>C646623849</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6039793</th>\n      <td>484</td>\n      <td>156220.74</td>\n      <td>C389614238</td>\n      <td>156220.74</td>\n      <td>0.0</td>\n      <td>C643171110</td>\n      <td>0.00</td>\n      <td>156220.74</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6020336</th>\n      <td>463</td>\n      <td>1968008.53</td>\n      <td>C1548769886</td>\n      <td>1968008.53</td>\n      <td>0.0</td>\n      <td>C1779956771</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6074070</th>\n      <td>516</td>\n      <td>346293.24</td>\n      <td>C829436029</td>\n      <td>346293.24</td>\n      <td>0.0</td>\n      <td>C1738520779</td>\n      <td>750235.55</td>\n      <td>1096528.80</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new1.shape","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:19.884185Z","iopub.execute_input":"2022-09-24T06:26:19.884529Z","iopub.status.idle":"2022-09-24T06:26:19.893274Z","shell.execute_reply.started":"2022-09-24T06:26:19.884497Z","shell.execute_reply":"2022-09-24T06:26:19.891880Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"(12708814, 14)"},"metadata":{}}]},{"cell_type":"code","source":"# Since there is not information for customers that start with M (Merchants). \n# Therefore nameDest that strart with M can not be igored & this feature can not be dropped out.\ndf_new1['nameDest'] = df_new1['nameDest'].str[0]\ndf_new1.tail()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:19.894978Z","iopub.execute_input":"2022-09-24T06:26:19.895581Z","iopub.status.idle":"2022-09-24T06:26:29.322050Z","shell.execute_reply.started":"2022-09-24T06:26:19.895547Z","shell.execute_reply":"2022-09-24T06:26:29.320728Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"         step     amount    nameOrig  oldbalanceOrg  newbalanceOrig nameDest  \\\n6362319   718    8634.29  C642813806       518802.0       510167.71        M   \n6362320   718  159188.22  C691808084         3859.0            0.00        C   \n6362321   718  186273.84  C102120699       168046.0            0.00        C   \n6362322   718   82096.45  C614459560        13492.0            0.00        C   \n6362323   718    1864.24   C49652609        20426.0        18561.76        C   \n\n         oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  CASH_OUT  \\\n6362319            0.00            0.00        0               0         0   \n6362320            0.00       159188.22        0               0         1   \n6362321        24893.67       211167.51        0               0         1   \n6362322            0.00        82096.45        0               0         0   \n6362323       188746.00       190610.24        0               0         0   \n\n         DEBIT  PAYMENT  TRANSFER  \n6362319      0        1         0  \n6362320      0        0         0  \n6362321      0        0         0  \n6362322      0        0         1  \n6362323      1        0         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n      <th>CASH_OUT</th>\n      <th>DEBIT</th>\n      <th>PAYMENT</th>\n      <th>TRANSFER</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6362319</th>\n      <td>718</td>\n      <td>8634.29</td>\n      <td>C642813806</td>\n      <td>518802.0</td>\n      <td>510167.71</td>\n      <td>M</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362320</th>\n      <td>718</td>\n      <td>159188.22</td>\n      <td>C691808084</td>\n      <td>3859.0</td>\n      <td>0.00</td>\n      <td>C</td>\n      <td>0.00</td>\n      <td>159188.22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362321</th>\n      <td>718</td>\n      <td>186273.84</td>\n      <td>C102120699</td>\n      <td>168046.0</td>\n      <td>0.00</td>\n      <td>C</td>\n      <td>24893.67</td>\n      <td>211167.51</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362322</th>\n      <td>718</td>\n      <td>82096.45</td>\n      <td>C614459560</td>\n      <td>13492.0</td>\n      <td>0.00</td>\n      <td>C</td>\n      <td>0.00</td>\n      <td>82096.45</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6362323</th>\n      <td>718</td>\n      <td>1864.24</td>\n      <td>C49652609</td>\n      <td>20426.0</td>\n      <td>18561.76</td>\n      <td>C</td>\n      <td>188746.00</td>\n      <td>190610.24</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new1['nameDest'] = pd.get_dummies(df_new1.nameDest, drop_first=True)\ndf_new1.tail()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:29.323569Z","iopub.execute_input":"2022-09-24T06:26:29.323938Z","iopub.status.idle":"2022-09-24T06:26:30.724400Z","shell.execute_reply.started":"2022-09-24T06:26:29.323905Z","shell.execute_reply":"2022-09-24T06:26:30.723164Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"         step     amount    nameOrig  oldbalanceOrg  newbalanceOrig  nameDest  \\\n6362319   718    8634.29  C642813806       518802.0       510167.71         1   \n6362320   718  159188.22  C691808084         3859.0            0.00         0   \n6362321   718  186273.84  C102120699       168046.0            0.00         0   \n6362322   718   82096.45  C614459560        13492.0            0.00         0   \n6362323   718    1864.24   C49652609        20426.0        18561.76         0   \n\n         oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  CASH_OUT  \\\n6362319            0.00            0.00        0               0         0   \n6362320            0.00       159188.22        0               0         1   \n6362321        24893.67       211167.51        0               0         1   \n6362322            0.00        82096.45        0               0         0   \n6362323       188746.00       190610.24        0               0         0   \n\n         DEBIT  PAYMENT  TRANSFER  \n6362319      0        1         0  \n6362320      0        0         0  \n6362321      0        0         0  \n6362322      0        0         1  \n6362323      1        0         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n      <th>CASH_OUT</th>\n      <th>DEBIT</th>\n      <th>PAYMENT</th>\n      <th>TRANSFER</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6362319</th>\n      <td>718</td>\n      <td>8634.29</td>\n      <td>C642813806</td>\n      <td>518802.0</td>\n      <td>510167.71</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362320</th>\n      <td>718</td>\n      <td>159188.22</td>\n      <td>C691808084</td>\n      <td>3859.0</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>159188.22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362321</th>\n      <td>718</td>\n      <td>186273.84</td>\n      <td>C102120699</td>\n      <td>168046.0</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>24893.67</td>\n      <td>211167.51</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362322</th>\n      <td>718</td>\n      <td>82096.45</td>\n      <td>C614459560</td>\n      <td>13492.0</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>82096.45</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6362323</th>\n      <td>718</td>\n      <td>1864.24</td>\n      <td>C49652609</td>\n      <td>20426.0</td>\n      <td>18561.76</td>\n      <td>0</td>\n      <td>188746.00</td>\n      <td>190610.24</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new1.drop(columns = 'nameOrig', axis = 1, inplace = True)\ndf_new1.tail()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:30.726303Z","iopub.execute_input":"2022-09-24T06:26:30.726770Z","iopub.status.idle":"2022-09-24T06:26:32.522742Z","shell.execute_reply.started":"2022-09-24T06:26:30.726727Z","shell.execute_reply":"2022-09-24T06:26:32.521425Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"         step     amount  oldbalanceOrg  newbalanceOrig  nameDest  \\\n6362319   718    8634.29       518802.0       510167.71         1   \n6362320   718  159188.22         3859.0            0.00         0   \n6362321   718  186273.84       168046.0            0.00         0   \n6362322   718   82096.45        13492.0            0.00         0   \n6362323   718    1864.24        20426.0        18561.76         0   \n\n         oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  CASH_OUT  \\\n6362319            0.00            0.00        0               0         0   \n6362320            0.00       159188.22        0               0         1   \n6362321        24893.67       211167.51        0               0         1   \n6362322            0.00        82096.45        0               0         0   \n6362323       188746.00       190610.24        0               0         0   \n\n         DEBIT  PAYMENT  TRANSFER  \n6362319      0        1         0  \n6362320      0        0         0  \n6362321      0        0         0  \n6362322      0        0         1  \n6362323      1        0         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>amount</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n      <th>CASH_OUT</th>\n      <th>DEBIT</th>\n      <th>PAYMENT</th>\n      <th>TRANSFER</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6362319</th>\n      <td>718</td>\n      <td>8634.29</td>\n      <td>518802.0</td>\n      <td>510167.71</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362320</th>\n      <td>718</td>\n      <td>159188.22</td>\n      <td>3859.0</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>159188.22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362321</th>\n      <td>718</td>\n      <td>186273.84</td>\n      <td>168046.0</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>24893.67</td>\n      <td>211167.51</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6362322</th>\n      <td>718</td>\n      <td>82096.45</td>\n      <td>13492.0</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>82096.45</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6362323</th>\n      <td>718</td>\n      <td>1864.24</td>\n      <td>20426.0</td>\n      <td>18561.76</td>\n      <td>0</td>\n      <td>188746.00</td>\n      <td>190610.24</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new1.info()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:32.531021Z","iopub.execute_input":"2022-09-24T06:26:32.531507Z","iopub.status.idle":"2022-09-24T06:26:32.545788Z","shell.execute_reply.started":"2022-09-24T06:26:32.531464Z","shell.execute_reply":"2022-09-24T06:26:32.544461Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 12708814 entries, 6283817 to 6362323\nData columns (total 13 columns):\n #   Column          Dtype  \n---  ------          -----  \n 0   step            int64  \n 1   amount          float64\n 2   oldbalanceOrg   float64\n 3   newbalanceOrig  float64\n 4   nameDest        uint8  \n 5   oldbalanceDest  float64\n 6   newbalanceDest  float64\n 7   isFraud         int64  \n 8   isFlaggedFraud  int64  \n 9   CASH_OUT        uint8  \n 10  DEBIT           uint8  \n 11  PAYMENT         uint8  \n 12  TRANSFER        uint8  \ndtypes: float64(5), int64(3), uint8(5)\nmemory usage: 933.2 MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## ****Now checking the correlation of isFraud with different features***","metadata":{"execution":{"iopub.status.busy":"2022-09-23T09:31:16.157207Z","iopub.execute_input":"2022-09-23T09:31:16.157715Z","iopub.status.idle":"2022-09-23T09:31:16.162904Z","shell.execute_reply.started":"2022-09-23T09:31:16.157675Z","shell.execute_reply":"2022-09-23T09:31:16.161887Z"}}},{"cell_type":"code","source":"# Checking how strongly isFraud is correlated with other features\ndf_corr = df_new1.corr()\ndf_corr['isFraud'].sort_values(ascending = False)","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:32.547296Z","iopub.execute_input":"2022-09-24T06:26:32.547766Z","iopub.status.idle":"2022-09-24T06:26:40.744694Z","shell.execute_reply.started":"2022-09-24T06:26:32.547730Z","shell.execute_reply":"2022-09-24T06:26:40.743358Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"isFraud           1.000000\nTRANSFER          0.457381\namount            0.345630\nstep              0.323963\nCASH_OUT          0.151469\noldbalanceOrg     0.125447\nisFlaggedFraud    0.031027\nnewbalanceDest    0.007498\nDEBIT            -0.057191\noldbalanceDest   -0.082056\nnewbalanceOrig   -0.132097\nnameDest         -0.451433\nPAYMENT          -0.451433\nName: isFraud, dtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"## ****Developing Machine Learning Model***","metadata":{"execution":{"iopub.status.busy":"2022-09-23T13:31:56.565896Z","iopub.execute_input":"2022-09-23T13:31:56.566416Z","iopub.status.idle":"2022-09-23T13:31:56.572095Z","shell.execute_reply.started":"2022-09-23T13:31:56.566351Z","shell.execute_reply":"2022-09-23T13:31:56.570743Z"}}},{"cell_type":"code","source":"df_new1.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:40.746968Z","iopub.execute_input":"2022-09-24T06:26:40.748372Z","iopub.status.idle":"2022-09-24T06:26:40.767765Z","shell.execute_reply.started":"2022-09-24T06:26:40.748317Z","shell.execute_reply":"2022-09-24T06:26:40.766393Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"         step      amount  oldbalanceOrg  newbalanceOrig  nameDest  \\\n6283817   658   619824.64      619824.64             0.0         0   \n1030533    71  1871553.73     1871553.73             0.0         0   \n6039793   484   156220.74      156220.74             0.0         0   \n6020336   463  1968008.53     1968008.53             0.0         0   \n6074070   516   346293.24      346293.24             0.0         0   \n\n         oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  CASH_OUT  \\\n6283817      1420676.78      2040501.42        1               0         1   \n1030533            0.00            0.00        1               0         0   \n6039793            0.00       156220.74        1               0         1   \n6020336            0.00            0.00        1               0         0   \n6074070       750235.55      1096528.80        1               0         1   \n\n         DEBIT  PAYMENT  TRANSFER  \n6283817      0        0         0  \n1030533      0        0         1  \n6039793      0        0         0  \n6020336      0        0         1  \n6074070      0        0         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>amount</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n      <th>CASH_OUT</th>\n      <th>DEBIT</th>\n      <th>PAYMENT</th>\n      <th>TRANSFER</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6283817</th>\n      <td>658</td>\n      <td>619824.64</td>\n      <td>619824.64</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1420676.78</td>\n      <td>2040501.42</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1030533</th>\n      <td>71</td>\n      <td>1871553.73</td>\n      <td>1871553.73</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6039793</th>\n      <td>484</td>\n      <td>156220.74</td>\n      <td>156220.74</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>156220.74</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6020336</th>\n      <td>463</td>\n      <td>1968008.53</td>\n      <td>1968008.53</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6074070</th>\n      <td>516</td>\n      <td>346293.24</td>\n      <td>346293.24</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>750235.55</td>\n      <td>1096528.80</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = df_new1.drop(columns = 'isFraud', axis = 1)\ny = df_new1['isFraud']","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:40.769613Z","iopub.execute_input":"2022-09-24T06:26:40.770159Z","iopub.status.idle":"2022-09-24T06:26:41.163373Z","shell.execute_reply.started":"2022-09-24T06:26:40.770118Z","shell.execute_reply":"2022-09-24T06:26:41.162322Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# train_test_split\nfrom sklearn.model_selection import train_test_split\n(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size = 0.2)","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:41.165023Z","iopub.execute_input":"2022-09-24T06:26:41.165518Z","iopub.status.idle":"2022-09-24T06:26:46.907069Z","shell.execute_reply.started":"2022-09-24T06:26:41.165468Z","shell.execute_reply":"2022-09-24T06:26:46.905977Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"# importing random forest classifier from ensemble module\nfrom sklearn.ensemble import RandomForestClassifier\n\n# creating a RF classifier\nrfc = RandomForestClassifier(n_estimators = 25) \n \n# Training the model on the training dataset\n# fit function is used to train the model using the training sets as parameters\nrfc.fit(X_train, y_train)\n \n# performing predictions on the test dataset\ny_pred = rfc.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:26:46.908849Z","iopub.execute_input":"2022-09-24T06:26:46.909516Z","iopub.status.idle":"2022-09-24T06:39:44.164225Z","shell.execute_reply.started":"2022-09-24T06:26:46.909480Z","shell.execute_reply":"2022-09-24T06:39:44.162822Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"# Constructing the confusion matrix.\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:39:44.166141Z","iopub.execute_input":"2022-09-24T06:39:44.167227Z","iopub.status.idle":"2022-09-24T06:39:44.845101Z","shell.execute_reply.started":"2022-09-24T06:39:44.167184Z","shell.execute_reply":"2022-09-24T06:39:44.843832Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"array([[1271820,      88],\n       [      0, 1269855]])"},"metadata":{}}]},{"cell_type":"code","source":"# accuracy_score = TP + TN / (TP + FP + TN + FN)\naccuracy_score = (1270768 + 1270929) / (1270768 + 66 + 1270929 + 0)\nprint('accuracy_score = ', accuracy_score)\n\n# precision_score = (TP) / (TP+FP)\nprecision_score = 1270768 / (1270768 + 66)\nprint('precision_score = ', precision_score)\n\n# recall_score = (TP) / (TP+FN)\nrecall_score = 1270768 / (1270768 + 0)\nprint('recall_score = ', recall_score)","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:39:44.846761Z","iopub.execute_input":"2022-09-24T06:39:44.847130Z","iopub.status.idle":"2022-09-24T06:39:44.855031Z","shell.execute_reply.started":"2022-09-24T06:39:44.847097Z","shell.execute_reply":"2022-09-24T06:39:44.853594Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"accuracy_score =  0.9999740337710479\nprecision_score =  0.9999480656010148\nrecall_score =  1.0\n","output_type":"stream"}]},{"cell_type":"code","source":"# To compute the F1 score, simply call the f1_score() function:\nfrom sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2022-09-24T06:39:44.856518Z","iopub.execute_input":"2022-09-24T06:39:44.857101Z","iopub.status.idle":"2022-09-24T06:39:46.351444Z","shell.execute_reply.started":"2022-09-24T06:39:44.857066Z","shell.execute_reply":"2022-09-24T06:39:46.350270Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"0.999965351575204"},"metadata":{}}]},{"cell_type":"markdown","source":"> ## ****It is clear from precision_score & f1_score that the develpoed ML Model is performing quite well***","metadata":{}}]}
